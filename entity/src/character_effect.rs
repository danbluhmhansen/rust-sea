//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "character_effect")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub character_id: Uuid,
    pub key: String,
    pub value: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::player_character::Entity",
        from = "Column::CharacterId",
        to = "super::player_character::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PlayerCharacter,
}

impl Related<super::player_character::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlayerCharacter.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
